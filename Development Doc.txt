This Document contains notes on the development of my music store. 
This will be used to note code that was entered or to play with as well as any other ideas. 

********************10/18/2011***********************************
Scaffold generation:
rails generate scaffold Product title:string artist:string album:string description:text image_url:string price:decimal

Read Chapter 6 and did the basic creation of a new rails app and set up my data base

	made the suggested change to my 20111018195858_create_products.rb(Music_Store/db/migrate)
class CreateProducts < ActiveRecord::Migration
  def self.up
    create_table :products do |t|
      t.string :title
      t.string :artist
      t.string :album
      t.text :description
      t.string :image_url
      t.decimal :price, precision => 8, :scale => 2

      t.timestamps
    end
  end
  def self.down
      drop_table :products		*****investigate this option when development progresses. 
  end
end



Began building my Seeds file with sample titles from Linkin Park. 
Product.delete_all
Product.create(:title => 'Burning In The Skies',
  :artist => 'Linkin Park',
  :album  => 'A Thousand Suns',
  :description => 
    %{<p>
        Length - 4:13
        Genre Alternative Rock
        Composer - Linkin Park
      </p>},
  :image_url =>   '/images/wd4d.jpg',    
  :price => 42.95)
# . . .
Start here next time and add more titles and download album cover picture. 



*****************************11/4/2011***************************************************************************

Finished adding sample tracks to my seed db seed file and added the cover image. 

Adding the depot.css file to public/stylesheets directory. *****************Need to play with this***************

Added code below to public/depot.css file to play with displaying title, artist and album 

#product_list .list_title{
 width:        20%;     
}
#product_list .list_title dl{
 margin: 0;
}

#prodct_list .list_title dt{
	color:       #fff;
	font-weight: bold ;
	font-size:   small;
}

#product_list .list_artist{
 width:        20%;     
}
#product_list .list_artist dl{
 margin: 0;
}
#prodct_list .list_artist dt{
	color:       #fff;
	font-weight: bold ;
	font-size:   small;
}
#product_list .list_album{
 width:        20%;     
}
#product_list .list_album dl{
 margin: 0;
}
#prodct_list .list_album dt{
	color:       #fff;
	font-weight: bold; 
	font-size:   small;
}


needed to move images folder from /app/assets/images to /public/


Created Git repository PazStore and made my first commit and added my files 

Added Validation for title....description, price, and Image URL

Start at chapter 7 pg 80 when starting again. 



**************************************11/7/2011 Unit Testing**************************************************************
Having issues doing the units tests.... *****come back to this later or try out cucumber testing *******


Had success with the following test.

test"product price must be positive" do
      product = Product.new(:title        => "My Song",
                            :artist       => "My artist",
                            :album        => "MyAlbum",
                            :description  => "yyy",
                            :image_url    => "zzz.jpg")
  product.price = -1
  assert product.invalid?
  assert_equal "must be greater than or equal to 0.01",
    product.errors[:price].join('; ')
                             
   product.price = 0 
    assert product.invalid?
    assert_equal "must be greater than or equal to 0.01",
    product.errors[:price].join('; ')
  
    product.price = 1
    assert product.valid?
 
  end

had Success with all unit tests except for  test "product attributes must not be empty"



****************************Catalog Listing******************************

created new controller with:
rails generate controller store index

updated routes to go to store index in /config/routes:
root :to => 'store#index', :as => 'store' 

had to remove public/index.html by git rm public/index.html (using git to manage source code)

updated store_controller to show all products:

class StoreController < ApplicationController
  def index
    @products = Product.all
  end

end

Displaying products in alphabetical order in /app/modes/product by: *********come back and play with this******

class Product < ActiveRecord::Base
default_scope :order => 'title' *****possible to do it by artist or song****




Added the following to display products on page in app/store/index.html.erb
<% if notice %>
<p id = "notice"><%= notice %></p>
<% end %>

<h1> Your Music Catalog</h1>

<% @products.each do |product| %>
	<div class="entry">
	<%= image_tag(product.image_url) %>
	<h3> <%= product.title %></h3>
	 <h5> <%= product.artist %></h5>
	 <h6> <%= product.album %></h6>
	 <div class="price_line">
	 	<span class="price"><%= product.price %></span>
	 </div>
	</div>
<% end %>
 
improved display by editing /app/views/layouts/application.html.erb with:
<!DOCTYPE html>
<html>
<head>
  <title>PazStore</title>
  <%= stylesheet_link_tag    "application" %>
  <%= stylesheet_link_tag    "depot", :media => "all" %>
  <%= javascript_include_tag "application" %>
  <%= csrf_meta_tags %>
</head>
<body id="store">
	<div id="banner">
	<%= image_tag("logo.jpg") %>
	<%= @page_title || "Paz Music Store" %>
	</div>
   <div id = "columns">
   	<div id = "side">
   		<a href= "http://www....">Home</a><br />
   		<a href="mailto:nmeliasp@unm.edu">Contact Us</a><br />
   	</div>
   <div id="main">
   	<%= yield %>
   </div>
  </div>
</body>
</html>

Had to place logo.jpg in /public/assets


Updated depot.css file with /* Styles for Main Page */****come back and play with colors and layouts

added to app/views/store/index.html.erb for formating of te price
<span class="price"><%= number_to_currency(product.price) %></span>



**********Cart Creation*****************************

generated cart with and migrated it to db: 
rails generate scaffold cart

edited app/controllers/application_controller to store and index a cart id
class ApplicationController < ActionController::Base
  protect_from_forgery
  
  private
  
    def current_cart
        Cart.find(session[:cart_id])
    rescue ActiveRecord::RecordNotFound
        cart = Cart.create
        session[:cart_id] = cart.id
        cart
    end


generated line_items and migrated to db:
rails generate scaffold line_item product_id:integer cart_id:integer


start on pg 103 to continue.

*************************************11/9/2011*******************************************************************

*****Connecting Products to Carts**********

Connected line_items to the cart and added a destroy dependency 
class Cart < ActiveRecord::Base

has_many :line_items, :dependent => destroy
end


Connected line_items to product and cart
class LineItem < ActiveRecord::Base
belongs_to :product
belongs_to :cart

end


Defined that product has many line items and check if a line is being referenced before being destroyed
class Product < ActiveRecord::Base

default_scope :order => 'title'
has_many :line_items
before_destroy :ensure_not_referenced_by_any_line_item
#.....
 private
    #ensure that there are no line items referencing this product
    def ensure_not_referenced_by_any_line_item
        if line_items.empty?
          return true
    else 
      errors.add(:base, 'Line Items Present')
      return false
      end
    end














